{

  //Reset ROOT and connect tree file
   gROOT->Reset();
   gStyle->SetPalette(1);
  gStyle->SetFrameFillStyle(0);
  gStyle->SetFrameBorderMode(0);
  gStyle->SetCanvasBorderMode(0);
  gStyle->SetCanvasColor(0);
  gStyle->SetPadBorderMode(0);

  gStyle->SetFrameBorderMode(0);
  gStyle->SetFrameFillStyle(0);
  gStyle->SetFillStyle(0);

  // change filename in lines below
   TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("Bposterior.root");
   if (!f) {
      f = new TFile("Bposterior.root");
   }
   // change "T" below to sivia
   TTree *T = (TTree*)gDirectory->Get("tree");

   //Declaration of leaves types

   Double_t     a1_Re;
   Double_t     a1_Im;
   Double_t     a2_Re;
   Double_t     a2_Im;
   Double_t     a3_Re;
   Double_t     a3_Im;
   Double_t     a4_Re;
   Double_t     a4_Im;
   Double_t     B_obs;
   Double_t     logL;
   Double_t     logWt;

   // Set branch addresses.
   T->SetBranchAddress("a1_Re",  &a1_Re);
   T->SetBranchAddress("a1_Im",  &a1_Im);
   T->SetBranchAddress("a2_Re",  &a2_Re);
   T->SetBranchAddress("a2_Im",  &a2_Im);
   T->SetBranchAddress("a3_Re",  &a3_Re);
   T->SetBranchAddress("a3_Im",  &a3_Im);
   T->SetBranchAddress("a4_Re",  &a4_Re);
   T->SetBranchAddress("a4_Im",  &a4_Im);
   T->SetBranchAddress("B_obs",  &B_obs);
   T->SetBranchAddress("logL",   &logL );
   T->SetBranchAddress("logWt",  &logWt);

   Long64_t         nentries = T->GetEntries();
 
   Double_t         maxLogWt = -100000;
 
   // TH2F            *h0  = new TH2F("h0",  "", 200, -2, 2,  100, 0, 2);
   TH1F            *h1  = new TH1F("h1",  "", 200, -1, 1           );
   // TH1F            *h2  = new TH1F("h2",  "", 100, 0, 2            );

 
   // Main event loop
   for (Long64_t i=0; i<nentries;i++) 
     {
       T->GetEntry(i);
       if ((logL +logWt) > maxLogWt)
	   //       cout << LogWt[j] << endl;
	 maxLogWt = (logL + logWt);
     }
   
     
       
   // end of main event loop
   cout << "Max LogWt: " << maxLogWt << endl;
	 
   for (i = 0; i<nentries; i++){
       T->GetEntry(i); 

       h1->Fill(B_obs, TMath::Exp(logL + logWt + TMath::Abs(maxLogWt))        );
              // h0->Fill(posX, posY,  TMath::Exp(LogWt + TMath::Abs(maxLogWt)) );
              // h0->Fill(posX,posY, ( TMath::Exp(LogL) )*( TMath::Exp(LogWt + TMath::Abs(maxLogWt) ) ) );
       // h0->Fill(posX,posY, TMath::Exp(LogL + LogWt + TMath::Abs(maxLogWt)));
       // h2->Fill(posY, TMath::Exp(LogL + LogWt + TMath::Abs(maxLogWt))        );

   }

   TCanvas *c1   = new TCanvas("c1", "Simple Beam Recoil, TNestedSample", 1200, 900);
   c1->SetFillStyle(0);
   c1->SetFillColor(0);
   c1->SetFrameFillStyle(0);

   c1->cd(1);
   h1->Draw("");
     // c1->SaveAs("~/public_html/nestedsampling/lighthouseXweighted.png");
    c1->SaveAs("simpleBweighted2.png");

  //    TCanvas *c2   = new TCanvas("c2", "Lighthouse Y-coord, TNestedSample", 1200, 900);
  // c2->SetFillStyle(0);
  // c2->SetFillColor(0);
  // c2->SetFrameFillStyle(0);
  // c2->cd(1);
  // h2->Draw("");
  
  //   // c2->SaveAs("~/public_html/nestedsampling/lighthouseYweighted.png");
  //  c2->SaveAs("gen2lighthouseYweighted.png");

  // TCanvas *c3   = new TCanvas("c3", "PosX vs. PosY, TNestedSample", 1200, 900);
  // c3->SetFillStyle(0);
  // c3->SetFillColor(0);
  // c3->SetFrameFillStyle(0);

  // c3->cd(1);
  // h0->Draw("COLZ");
  //   // c3->SaveAs("~/public_html/nestedsampling/lighthouseTNSplotweighted.png");
  //  c3->SaveAs("gen2lighthouseweighted.png");
}
